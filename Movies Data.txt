[<p>Python was conceived in the late 1980s<sup class="reference" id="cite_ref-venners-interview-pt-1_42-0"><a href="#cite_note-venners-interview-pt-1-42">[42]</a></sup> by <a href="/wiki/Guido_van_Rossum" title="Guido van Rossum">Guido van Rossum</a> at <a href="/wiki/Centrum_Wiskunde_%26_Informatica" title="Centrum Wiskunde &amp; Informatica">Centrum Wiskunde &amp; Informatica</a> (CWI) in the <a href="/wiki/Netherlands" title="Netherlands">Netherlands</a> as a successor to the <a href="/wiki/ABC_(programming_language)" title="ABC (programming language)">ABC programming language</a>, which was inspired by <a href="/wiki/SETL" title="SETL">SETL</a>,<sup class="reference" id="cite_ref-AutoNT-12_43-0"><a href="#cite_note-AutoNT-12-43">[43]</a></sup> capable of <a href="/wiki/Exception_handling" title="Exception handling">exception handling</a> and interfacing with the <a href="/wiki/Amoeba_(operating_system)" title="Amoeba (operating system)">Amoeba</a> operating system.<sup class="reference" id="cite_ref-faq-created_13-1"><a href="#cite_note-faq-created-13">[13]</a></sup> Its implementation began in December 1989.<sup class="reference" id="cite_ref-timeline-of-python_44-0"><a href="#cite_note-timeline-of-python-44">[44]</a></sup> Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his "permanent vacation" from his responsibilities as Python's "<a href="/wiki/Benevolent_dictator_for_life" title="Benevolent dictator for life">benevolent dictator for life</a>", a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker.<sup class="reference" id="cite_ref-lj-bdfl-resignation_45-0"><a href="#cite_note-lj-bdfl-resignation-45">[45]</a></sup> In January 2019, active Python core developers elected a five-member Steering Council to lead the project.<sup class="reference" id="cite_ref-46"><a href="#cite_note-46">[46]</a></sup><sup class="reference" id="cite_ref-47"><a href="#cite_note-47">[47]</a></sup>
</p>, <p>Python 2.0 was released on 16 October 2000, with many major new features such as <a href="/wiki/List_comprehension" title="List comprehension">list comprehensions</a>, <a href="/wiki/Cycle_detection" title="Cycle detection">cycle-detecting</a> garbage collection, <a href="/wiki/Reference_counting" title="Reference counting">reference counting</a>, and <a href="/wiki/Unicode" title="Unicode">Unicode</a> support.<sup class="reference" id="cite_ref-newin-2.0_48-0"><a href="#cite_note-newin-2.0-48">[48]</a></sup> Python 3.0, released on 3 December 2008, with many of its major features <a href="/wiki/Backporting" title="Backporting">backported</a> to Python 2.6.x<sup class="reference" id="cite_ref-pep-3000_49-0"><a href="#cite_note-pep-3000-49">[49]</a></sup> and 2.7.x. Releases of Python 3 include the <code>2to3</code> utility, which automates the translation of Python 2 code to Python 3.<sup class="reference" id="cite_ref-50"><a href="#cite_note-50">[50]</a></sup>      
</p>, <p>Python 2.7's <a href="/wiki/End-of-life_product" title="End-of-life product">end-of-life</a> was initially set for 2015, then postponed to 2020 out of concern that a large body of existing code could not easily be forward-ported to Python 3.<sup class="reference" id="cite_ref-51"><a href="#cite_note-51">[51]</a></sup><sup class="reference" id="cite_ref-52"><a href="#cite_note-52">[52]</a></sup> No further security patches or other improvements will be released for it.<sup class="reference" id="cite_ref-53"><a href="#cite_note-53">[53]</a></sup><sup class="reference" id="cite_ref-54"><a href="#cite_note-54">[54]</a></sup> Currently only 3.7 and later are supported. In 2021, Python 3.9.2 and 3.8.8 were expedited<sup class="reference" id="cite_ref-55"><a href="#cite_note-55">[55]</a></sup> as all versions of Python (including 2.7<sup class="reference" id="cite_ref-56"><a href="#cite_note-56">[56]</a></sup>) had security issues leading to possible <a class="mw-redirect" href="/wiki/Remote_code_execution" title="Remote code execution">remote code execution</a><sup class="reference" id="cite_ref-57"><a href="#cite_note-57">[57]</a></sup> and <a href="/wiki/Cache_poisoning" title="Cache poisoning">web cache poisoning</a>.<sup class="reference" id="cite_ref-58"><a href="#cite_note-58">[58]</a></sup>
</p>, <p>In 2022, Python 3.10.4 and 3.9.12 were expedited<sup class="reference" id="cite_ref-59"><a href="#cite_note-59">[59]</a></sup> and 3.8.13, and 3.7.13, because of many security issues.<sup class="reference" id="cite_ref-60"><a href="#cite_note-60">[60]</a></sup> When Python 3.9.13 was released in May 2022, it was announced that the 3.9 series (joining the older series 3.8 and 3.7) would only receive security fixes in the future.<sup class="reference" id="cite_ref-61"><a href="#cite_note-61">[61]</a></sup> On September 7, 2022, four new releases were made due to a potential <a href="/wiki/Denial-of-service_attack" title="Denial-of-service attack">denial-of-service attack</a>: 3.10.7, 3.9.14, 3.8.14, and 3.7.14.<sup class="reference" id="cite_ref-62"><a href="#cite_note-62">[62]</a></sup><sup class="reference" id="cite_ref-63"><a href="#cite_note-63">[63]</a></sup>
</p>, <p>As of November 2022,<sup class="plainlinks noexcerpt noprint asof-tag update" style="display:none;"><a class="external text" href="https://en.wikipedia.org/w/index.php?title=Python_(programming_language)&amp;action=edit">[update]</a></sup> Python 3.11 is the stable release. Notable changes from 3.10 include increased program execution speed and improved error reporting.<sup class="reference" id="cite_ref-64"><a href="#cite_note-64">[64]</a></sup>
</p>, <p>Python is a <a class="mw-redirect" href="/wiki/Multi-paradigm_programming_language" title="Multi-paradigm programming language">multi-paradigm programming language</a>. <a href="/wiki/Object-oriented_programming" title="Object-oriented programming">Object-oriented programming</a> and <a href="/wiki/Structured_programming" title="Structured programming">structured programming</a> are fully supported, and many of their features support functional programming and <a href="/wiki/Aspect-oriented_programming" title="Aspect-oriented programming">aspect-oriented programming</a> (including <a href="/wiki/Metaprogramming" title="Metaprogramming">metaprogramming</a><sup class="reference" id="cite_ref-AutoNT-13_65-0"><a href="#cite_note-AutoNT-13-65">[65]</a></sup> and <a href="/wiki/Metaobject" title="Metaobject">metaobjects</a>).<sup class="reference" id="cite_ref-AutoNT-14_66-0"><a href="#cite_note-AutoNT-14-66">[66]</a></sup> Many other paradigms are supported via extensions, including <a href="/wiki/Design_by_contract" title="Design by contract">design by contract</a><sup class="reference" id="cite_ref-AutoNT-15_67-0"><a href="#cite_note-AutoNT-15-67">[67]</a></sup><sup class="reference" id="cite_ref-AutoNT-16_68-0"><a href="#cite_note-AutoNT-16-68">[68]</a></sup> and <a href="/wiki/Logic_programming" title="Logic programming">logic programming</a>.<sup class="reference" id="cite_ref-AutoNT-17_69-0"><a href="#cite_note-AutoNT-17-69">[69]</a></sup>
</p>, <p>Python uses <a class="mw-redirect" href="/wiki/Dynamic_typing" title="Dynamic typing">dynamic typing</a> and a combination of <a href="/wiki/Reference_counting" title="Reference counting">reference counting</a> and a cycle-detecting garbage collector for <a href="/wiki/Memory_management" title="Memory management">memory management</a>.<sup class="reference" id="cite_ref-Reference_counting_70-0"><a href="#cite_note-Reference_counting-70">[70]</a></sup> It uses dynamic <a href="/wiki/Name_resolution_(programming_languages)" title="Name resolution (programming languages)">name resolution</a> (<a href="/wiki/Late_binding" title="Late binding">late binding</a>), which binds method and variable names during program execution.
</p>, <p>Its design offers some support for functional programming in the <a href="/wiki/Lisp_(programming_language)" title="Lisp (programming language)">Lisp</a> tradition. It has <code>filter</code>,<code>map</code>and<code>reduce</code> functions; <a href="/wiki/List_comprehension" title="List comprehension">list comprehensions</a>, <a href="/wiki/Associative_array" title="Associative array">dictionaries</a>, sets, and <a href="/wiki/Generator_(computer_programming)" title="Generator (computer programming)">generator</a> expressions.<sup class="reference" id="cite_ref-AutoNT-59_71-0"><a href="#cite_note-AutoNT-59-71">[71]</a></sup> The standard library has two modules (<code>itertools</code> and <code>functools</code>) that implement functional tools borrowed from <a href="/wiki/Haskell" title="Haskell">Haskell</a> and <a href="/wiki/Standard_ML" title="Standard ML">Standard ML</a>.<sup class="reference" id="cite_ref-AutoNT-18_72-0"><a href="#cite_note-AutoNT-18-72">[72]</a></sup>
</p>, <p>Its core philosophy is summarized in the document <i>The <a href="/wiki/Zen_of_Python" title="Zen of Python">Zen of Python</a></i> (<i>PEP 20</i>), which includes <a href="/wiki/Aphorism" title="Aphorism">aphorisms</a> such as:<sup class="reference" id="cite_ref-PEP20_73-0"><a href="#cite_note-PEP20-73">[73]</a></sup>  
</p>, <p>Rather than building all of its functionality into its core, Python was designed to be highly <a href="/wiki/Extensibility" title="Extensibility">extensible</a> via modules. This compact modularity has made it particularly popular as a means of adding programmable interfaces to existing applications. Van Rossum's vision of a small core language with a large standard library and easily extensible interpreter stemmed from his frustrations with <a href="/wiki/ABC_(programming_language)" title="ABC (programming language)">ABC</a>, which espoused the opposite approach.<sup class="reference" id="cite_ref-venners-interview-pt-1_42-1"><a href="#cite_note-venners-interview-pt-1-42">[42]</a></sup>
</p>, <p>Python strives for a simpler, less-cluttered syntax and grammar while giving developers a choice in their coding methodology. In contrast to <a href="/wiki/Perl" title="Perl">Perl</a>'s "<a class="mw-redirect" href="/wiki/There_is_more_than_one_way_to_do_it" title="There is more than one way to do it">there is more than one way to do it</a>" motto, Python embraces a "there should be one—and preferably only one—obvious way to do it"  philosophy.<sup class="reference" id="cite_ref-PEP20_73-1"><a href="#cite_note-PEP20-73">[73]</a></sup> <a href="/wiki/Alex_Martelli" title="Alex Martelli">Alex Martelli</a>, a <a href="/wiki/Fellow" title="Fellow">Fellow</a> at the <a href="/wiki/Python_Software_Foundation" title="Python Software Foundation">Python Software Foundation</a> and Python book author, wrote: "To describe something as 'clever' is <i>not</i> considered a compliment in the Python culture."<sup class="reference" id="cite_ref-AutoNT-19_74-0"><a href="#cite_note-AutoNT-19-74">[74]</a></sup>
</p>, <p>Python's developers strive to avoid <a class="mw-redirect" href="/wiki/Premature_optimization" title="Premature optimization">premature optimization</a> and reject patches to non-critical parts of the <a href="/wiki/CPython" title="CPython">CPython</a> reference implementation that would offer marginal increases in speed at the cost of clarity.<sup class="reference" id="cite_ref-AutoNT-20_75-0"><a href="#cite_note-AutoNT-20-75">[75]</a></sup> When speed is important, a Python programmer can move time-critical functions to extension modules written in languages such as C; or use <a href="/wiki/PyPy" title="PyPy">PyPy</a>, a <a href="/wiki/Just-in-time_compilation" title="Just-in-time compilation">just-in-time compiler</a>. <a href="/wiki/Cython" title="Cython">Cython</a> is also available, which translates a Python script into C and makes direct C-level API calls into the Python interpreter.
</p>, <p>Python's developers aim for it to be fun to use. This is reflected in its name—a tribute to the British comedy group <a href="/wiki/Monty_Python" title="Monty Python">Monty Python</a><sup class="reference" id="cite_ref-whyname_76-0"><a href="#cite_note-whyname-76">[76]</a></sup>—and in occasionally playful approaches to tutorials and reference materials, such as the use of the terms "spam" and "eggs" (a reference to <a class="mw-redirect" href="/wiki/Spam_(Monty_Python)" title="Spam (Monty Python)">a Monty Python sketch</a>) in examples, instead of the often-used <a href="/wiki/Foobar" title="Foobar">"foo" and "bar"</a>.<sup class="reference" id="cite_ref-77"><a href="#cite_note-77">[77]</a></sup><sup class="reference" id="cite_ref-78"><a href="#cite_note-78">[78]</a></sup>
</p>, <p>A common <a href="/wiki/Neologism" title="Neologism">neologism</a> in the Python community is <i>pythonic</i>, which has a wide range of meanings related to program style. "Pythonic" code may use Python idioms well, be natural or show fluency in the language, or conform with Python's minimalist philosophy and emphasis on readability. Code that is difficult to understand or reads like a rough transcription from another programming language is called <i>unpythonic</i>.<sup class="reference" id="cite_ref-79"><a href="#cite_note-79">[79]</a></sup><sup class="reference" id="cite_ref-80"><a href="#cite_note-80">[80]</a></sup>
</p>, <p>Python is meant to be an easily readable language. Its formatting is visually uncluttered and often uses English keywords where other languages use punctuation. Unlike many other languages, it does not use <a class="mw-redirect" href="/wiki/Curly_bracket_programming_language" title="Curly bracket programming language">curly brackets</a> to delimit blocks, and semicolons after statements are allowed but rarely used. It has fewer syntactic exceptions and special cases than <a href="/wiki/C_(programming_language)" title="C (programming language)">C</a> or <a href="/wiki/Pascal_(programming_language)" title="Pascal (programming language)">Pascal</a>.<sup class="reference" id="cite_ref-AutoNT-52_81-0"><a href="#cite_note-AutoNT-52-81">[81]</a></sup>
</p>, <p>Python uses <a href="/wiki/Whitespace_character" title="Whitespace character">whitespace</a> indentation, rather than <a class="mw-redirect" href="/wiki/Curly_bracket_programming_language" title="Curly bracket programming language">curly brackets</a> or keywords, to delimit <a href="/wiki/Block_(programming)" title="Block (programming)">blocks</a>. An increase in indentation comes after certain statements; a decrease in indentation signifies the end of the current block.<sup class="reference" id="cite_ref-AutoNT-53_82-0"><a href="#cite_note-AutoNT-53-82">[82]</a></sup> Thus, the program's visual structure accurately represents its semantic structure.<sup class="reference" id="cite_ref-guttag_83-0"><a href=
Python was conceived in the late 1980s[42] by Guido van Rossum at Centrum Wiskunde & Informatica (CWI) in the Netherlands as a successor to the ABC programming language, which was inspired by SETL,[43] capable of exception handling and interfacing with the Amoeba operating system.[13] Its implementation began in December 1989.[44] Van Rossum shouldered sole responsibility for the project, as the lead developer, until 12 July 2018, when he announced his "permanent vacation" from his responsibilities as Python's "benevolent dictator for life", a title the Python community bestowed upon him to reflect his long-term commitment as the project's chief decision-maker.[45] In January 2019, active Python core developers elected a five-member Steering Council to lead the project.[46][47]